apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
  creationTimestamp: '2020-01-10T19:39:43Z'
  labels:
    app: cicd-pipeline
    name: cicd-pipeline
  name: tasks-pipeline
  namespace: cicd-user1
  resourceVersion: '1008588'
  selfLink: >-
    /apis/build.openshift.io/v1/namespaces/cicd-user1/buildconfigs/tasks-pipeline
  uid: f34ab39d-33e0-11ea-969d-1681306e624b
spec:
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      env:
        - name: DEV_PROJECT
          value: dev-user1
        - name: STAGE_PROJECT
          value: stage-user1
      jenkinsfile: |-
        def ocuser = "user1" 
        def ocpass = "openshift"
        def ocp = "nova.redhatgov.io"
        def quayuser = "user1"
        def quaypass = "openshift"
        def quayrepo = "jboss-eap70-openshift"
        def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

        pipeline {
          agent {
            label 'jenkins-slave-image-mgmt'
          }
          stages {
          
            stage('Build App') {
              steps {
                git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
                script {
                  def pom = readMavenPom file: 'pom.xml'
                  version = pom.version
                }
                sh "${mvnCmd} install -DskipTests=true"
              }
            }
            
            stage('Test') {
              steps {
                sh "${mvnCmd} test"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
            }
            
            stage('Code Analysis') {
              steps {
                script {
                  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                }
              }
            }
            
            stage('Archive App') {
              steps {
                sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
              }
            }
            
            stage('Create Image Builder') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      return !openshift.selector("bc", "tasks").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.newBuild("--name=tasks", "--image-stream=jboss-eap70-openshift:1.5", "--binary=true")
                    }
                  }
                }
              }
            }
            
            stage('Build Image') {
              steps {
                sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("bc", "tasks").startBuild("--from-dir=oc-build", "--wait=true")
                    }
                  }
                }
              } 
            }
            
            stage('Clair Container Vulnerability Scan') {
              steps {
                sh "oc login -u $ocuser -p $ocpass --insecure-skip-tls-verify https://$ocp 2>&1"
                sh 'skopeo --debug copy --src-creds="$(oc whoami)":"$(oc whoami -t)" --src-tls-verify=false --dest-tls-verify=false' + " --dest-creds=$quayuser:$quaypass docker://docker-registry.default.svc:5000/cicd-$ocuser/jboss-eap70-openshift:1.5 docker://quay-enterprise-quay-enterprise.apps.$ocp/$quayuser/$quayrepo:1.5"
              }
            }
            
            stage('OSCAP DISA STIG Scan') {
              steps {
                sh "oc login -u $ocuser -p $ocpass --insecure-skip-tls-verify https://$ocp 2>&1"
                sh "sshpass -p $ocpass ssh -oStrictHostKeyChecking=no -t $ocuser@$ocp docker login -u $ocuser -p " + '"$(oc whoami -t)"' + " docker-registry-default.apps.$ocp"
                sh "sshpass -p $ocpass ssh -oStrictHostKeyChecking=no -t $ocuser@$ocp docker pull docker-registry-default.apps.$ocp/dev-$ocuser/tasks:latest"
                sh "sshpass -p $ocpass ssh -oStrictHostKeyChecking=no -t $ocuser@$ocp sudo oscap-docker image docker-registry-default.apps.$ocp/dev-$ocuser/tasks:latest xccdf eval --profile xccdf_org.ssgproject.content_profile_stig-rhel7-disa --report report.html /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml"
              }
            } 
            
            stage('Create DEV') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      return !openshift.selector('dc', 'tasks').exists()
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      def app = openshift.newApp("tasks:latest")
                      app.narrow("svc").expose();

                      def dc = openshift.selector("dc", "tasks")
                      while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                        sleep 10
                      }
                      openshift.set("triggers", "dc/tasks", "--manual")
                    }
                  }
                }
              }
            }
            
            stage('Deploy DEV') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
            
            stage('Promote to STAGE?') {
              steps {
                timeout(time:15, unit:'MINUTES') {
                  input message: "Promote to STAGE?", ok: "Promote"
                }
                script {
                  openshift.withCluster() {
                    openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:${version}")
                  }
                }
              }
            }
            
            stage('Deploy STAGE') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.STAGE_PROJECT) {
                      if (openshift.selector('dc', 'tasks').exists()) {
                        openshift.selector('dc', 'tasks').delete()
                        openshift.selector('svc', 'tasks').delete()
                        openshift.selector('route', 'tasks').delete()
                      }

                      openshift.newApp("tasks:${version}").narrow("svc").expose()
                    }
                  }
                }
              }
            }
          }
        }
          
    type: JenkinsPipeline
  triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
status:
  lastVersion: 20
